// Author: Fabio Somenzi <Fabio@Colorado.EDU>

typedef enum {THINKING,READING,EATING,HUNGRY} State;

`let N = 512;
module philo::`N(clock);
    input clock;

    `for (i = 0; i < `N; i++)
    `let ip1 = (`i + 1) % `N;
    State wire st::`i;
    `if (`i == 0)
    `let im1 = `N - 1;
    philosopher ph::`i (clock,st::`i,st::`ip1,st::`im1,READING);
    `else
    `let im1 = `i - 1;
    philosopher ph::`i (clock,st::`i,st::`ip1,st::`im1,THINKING);
    `endif
    `endfor

endmodule // philo


module philosopher(clk, out, left, right, init);
    input clk;
    output out;
    input left, right, init;
    State wire left, right, init;
    State wire  out;
    State reg self;

    wire      coin;
    assign coin = $ND(0,1);

    initial self = init;

    assign out = self;

    always @(posedge clk) begin
	case(self)
	  READING:
	    if (left == THINKING) self = THINKING;

	  THINKING:
	    if (coin && right == READING) self = READING;
	    else self = coin ? THINKING : HUNGRY;

	  EATING:
	    self = coin ? THINKING : EATING;

	  HUNGRY:
	    if (left != EATING && right != HUNGRY && right != EATING) 
	      self = EATING;
	endcase
    end // always @ (posedge clk)

endmodule // philosopher
