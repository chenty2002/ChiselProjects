// Elevators are numbered 1,...,`elev.
`let elev = 3;
// Floors are numbered 0,...,`floor-1.
`let floor = 4;
`let fm1 = `floor - 1;
// Number of bits required to represent a floor number.
`let width = 2;
`let wm1 = `width - 1;

typedef enum {UP,DOWN} dir;
typedef enum {STOPPED,MOVING} mov;
typedef enum {OPEN,OPENING,CLOSED,CLOSING} dr;
typedef enum {ON,OFF} onoff;

//*****************************************************************************
// Connect the elevators to the controller and choose a random initial
// floor for each elevator car.
//*****************************************************************************
module main(clk, random_up, random_down, random, r_stop
	    `for (i = 1; i <= `elev; i++)
	    ,random_push::`i, init::`i`i
	    `endfor
	    );
    input	      clk;
    input [0:`fm1]    random_up;
    input [0:`fm1]    random_down;
    input [1:`elev]   random;
    input [1:`elev]   r_stop;
    `for (i = 1; i <= `elev; i++)
    input [0:`fm1] random_push::`i;
    input [0:`wm1] init::`i`i;
    `endfor
    wire [1:`elev]    stop_next;
    wire [1:`elev]    inc;
    wire [1:`elev]    dec;
    wire [1:`elev]    continue;

    `for (i = 1; i <= `elev; i++)
    wire [0:`wm1] init::`i;
    `endfor

    // Choose initial state for each elevator.  Notice that $ND(0,1,2)
    // would give problems of nondeterministic tables.
    `for (i = 1; i <= `elev; i++)
    assign init::`i  = `floor <= init::`i`i ? `fm1 : init::`i`i;
    `endfor

    `for (i = 1; i <= `elev; i++)
    elevator e::`i (clk,stop_next[`i],inc[`i],dec[`i],continue[`i],
		    random_push::`i,random[`i],r_stop[`i],init::`i);
    `endfor
    main_control main_control(clk,inc,dec,stop_next,continue,random_up,
			      random_down
			      `for (i = 1; i <= `elev; i++)
			      ,init::`i
			      `endfor
			      );

endmodule // main


//*****************************************************************************
// Deal with floor buttons and communicate with elevator cars.
// This module receives one bit of inc and dec from each car, and controls
// each car via one bit of stop_next and continue.  It keeps track of the
// car positions, which is redundant because each car stores its own position.
//*****************************************************************************
module main_control(clk,inc,dec,stop_next,continue,random_up,random_down
		    `for (i = 1; i <= `elev; i++)
		    ,init::`i
		    `endfor
		    );
    input clk;
    input [1:`elev]   inc;
    input [1:`elev]   dec;
    output [1:`elev]  stop_next;
    output [1:`elev]  continue;
    input [0:`fm1]    random_up; // nondeterministic requests to go up
    input [0:`fm1]    random_down; // nondeterministic requests to go down
    // initial position of elevator cars
    `for (i = 1; i <= `elev; i++)
    input [0:`wm1]    init::`i;
    `endfor

    reg [0:`wm1]      locations[1:`elev]; // positions of the cars
    onoff reg         up_floor_buttons[0:`fm1];   // up b. at floors
    onoff reg         down_floor_buttons[0:`fm1]; // down b. at floors
    wire [0:`fm1]     buttons;	// floors currently requesting pick-up
    wire [0:`floor-2] top;
    wire [1:`floor-1] bottom;
    wire [1:`elev]    button_above; // there are pick-up requests above
    wire [1:`elev]    button_below; // there are pick-up requests below
    dir reg           direction[1:`elev];

    initial begin
	// Initially all cars are at the selected floors and there are no
	// pick-up requests.
	`for (i = 1; i <= `elev; i++)
	locations[`i]=init::`i;
	`endfor
	for (i=0; i<=`fm1; i=i+1) begin
	    up_floor_buttons[i] = OFF;
	    down_floor_buttons[i] = OFF;
	end
	for (i=1; i<=`elev; i=i+1) begin
	    direction[i] = UP;
	end
    end

    // Compute if each elevator should continue in the same direction.
    `for (i = 0; i < `floor; i++)
    assign buttons[`i] = up_floor_buttons[`i]==ON || down_floor_buttons[`i]==ON;
    `endfor

    assign bottom[1] = buttons[0];
    `for (i = 2; i < `floor; i++)
    `let im1 = `i - 1;
    assign bottom[`i] = bottom[`im1] || buttons[`im1];
    `endfor
    assign top[`floor-2] = buttons[`floor-1];
    `for (i = `floor - 3; i >= 0; i--)
    `let ip1 = `i + 1;
    assign top[`i] = top[`ip1] || buttons[`ip1];
    `endfor
    // Schedule the next pickup for each elevator car.  A car stops at the
    // next floor if there is a request pending for the current direction.
    `for (i = 1; i <= `elev; i++)
    assign button_below[`i] =
	      `for (j = `floor-1; j > 1; j--)
	      ((locations[`i]==`j) && bottom[`j]) ||
	      `endfor
	      (locations[`i]==1 && bottom[1]);
    assign button_above[`i] =
	   `for (j = 0; j < `floor-2; j++)
	   ((locations[`i]==`j) && top[`j]) ||
	   `endfor
	   ((locations[`i]==`floor-2) && top[`floor-2]);
    assign continue[`i] = button_above[`i] && direction[`i]==UP ||
	button_below[`i] && direction[`i]==DOWN;
    assign stop_next[`i] = ((locations[`i] != `floor-1)&&(direction[`i]==UP))?
	((up_floor_buttons[locations[`i]+1]==ON)?1:0):
	(((locations[`i] != 0)&&(direction[`i]==DOWN))?
	 ((down_floor_buttons[locations[`i]-1]==ON)?1:0):0);

    `endfor

    always @ (posedge clk) begin
	// Randomly push floor buttons.
	for (i=0; i<=`floor-1; i=i+1) begin
	    if (random_up[i]) up_floor_buttons[i]=ON;
	    if (random_down[i]) down_floor_buttons[i]=ON;
	end

	// Turn off scheduled floor buttons.
	// It is important to turn these off after the random pushes, since we
	// want the scheduled buttons to be OFF even though they may have been 
	// randomly pushed.
	for (i=1; i<=`elev; i=i+1) begin
	    if ((locations[i]!=`floor-1)&&(direction[i]==UP)) begin
		if (up_floor_buttons[locations[i]+1]==ON) begin
		    up_floor_buttons[locations[i]+1] = OFF;
		end
	    end
	    if ((locations[i]!=0)&&(direction[i]==DOWN)) begin
		if (down_floor_buttons[locations[i]-1]==ON) begin
		    down_floor_buttons[locations[i]-1] = OFF;
		end
	    end
	end
    end

    // Keep track of locations and directions.
    always @ (posedge clk) begin
	for (i=1; i<=`elev; i=i+1) begin
	    if (locations[i]==`floor-1) direction[i] = DOWN;
	    if (locations[i]==0) direction[i] = UP;
	    if (inc[i]) begin
		locations[i] = locations[i]+1;
		direction[i] = UP;
	    end
	    if (dec[i]) begin
		locations[i] = locations[i]-1;
		direction[i] = DOWN;
	    end
	end
    end

endmodule // main_control


//*****************************************************************************
//
//*****************************************************************************
module elevator(clk,stop_next,inc,dec,continue,random_push,random,r_stop,init);
    input  clk,stop_next,continue,random_push,random,r_stop,init;
    output inc,dec;

    onoff reg buttons[0:`fm1];
    wire [0:`fm1] random_push;
    wire [0:`wm1] init;
    reg [0:`wm1]  location;
    dir reg direction;
    mov reg movement;
    dr reg door;
    reg	 open_next;
    wire button_above, button_below;
    wire [0:`floor-2] top;
    wire [1:`floor-1] bottom;
    wire button_above, button_below;

    initial begin
	open_next = 0;
    	location = init;
    	direction = UP;
    	door = OPEN;
    	movement = STOPPED;
	for (i=0; i<=`fm1; i=i+1) begin
	    buttons[i] = OFF;
	end
    end

    assign bottom[1] = buttons[0]==ON;
    `for (i = 2; i < `floor; i++)
    `let im1 = `i - 1;
    assign bottom[`i] = bottom[`im1] || buttons[`im1]==ON;
    `endfor
    assign top[`floor-2] = buttons[`floor-1]==ON;
    `for (i = `floor - 3; i >= 0; i--)
    `let ip1 = `i + 1;
    assign top[`i] = top[`ip1] || buttons[`ip1]==ON;
    `endfor
    assign button_below =
	   `for (j = `floor-1; j > 1; j--)
	   (location==`j && bottom[`j]) ||
	   `endfor
	   (location==1 && bottom[1]);
    assign button_above =
	   `for (j = 0; j < `floor-2; j++)
	   (location==`j && top[`j]) ||
	   `endfor
	   (location==`floor-2 && top[`floor-2]);

    always @ (posedge clk) begin
	// Randomly push buttons. 
	// But when door is open turn button off for that floor. 
	for (i=0; i<=`fm1; i=i+1) begin
	    if (i == location) buttons[i] = OFF;
	    else if (random_push[i]) buttons[i] = ON;
	end

	// Record a request to stop at the next floor.
	// It is important that this happens last since we want to
	// insure that the stop_next request is always recorded by
	// pushing the button.
	if (stop_next) begin
	    if (direction==UP) buttons[location+1] = ON;
	    else buttons[location-1] = ON;
	end
    end


    always @ (posedge clk) begin
	// Schedule the door to open at the next floor.
	if (door != CLOSED) open_next = 0;
	else if (movement==MOVING &&
		 (stop_next||(direction==UP&&buttons[location+1]==ON)||
		  (direction==DOWN&&buttons[location-1]==ON)))
	    open_next = 1;
    end


    always @ (posedge clk) begin
	// Door operation: open the door if button[location] is on.
	// Random pause between different states.
	case (door)
	  CLOSED: if (open_next&&movement==STOPPED)
	      door = OPENING;
	  OPENING: if (random) door = OPEN;
	  OPEN: if (random) door = CLOSING;
	  CLOSING: if (random) door = CLOSED;
	endcase
    end


    // Move to next floor. Increase or decrease location when arrived.
    // Signal to main control (through inc or dec) that have arrived at
    // next floor.
    wire stop_moving;
    wire start_moving;
    assign start_moving = (continue || button_above&&direction==UP) || 
	(button_below && direction == DOWN);
    assign stop_moving = r_stop&&(movement == MOVING);
    assign inc = (stop_moving)&&(direction == UP);
    assign dec = (stop_moving)&&(direction == DOWN);

    always @ (posedge clk) begin
	if (door == CLOSED) begin
	    case (movement)
	      STOPPED: if (door==CLOSED&&start_moving&&!open_next) 
		  movement = MOVING;
	      MOVING: if (stop_moving) begin
		  movement = STOPPED;
		  if (direction == UP) location = location+1;
		  if (direction == DOWN) location = location-1;
	      end
	    endcase
	end
    end

    // Determine direction of movement.
    always @ (posedge clk) begin
	case (direction) 
	  UP: if ((!button_above)&&!continue) 
	      direction = DOWN;
	  DOWN: if ((!button_below)&&!continue) 
	      direction = UP;
	endcase
	if (location==`floor-1) direction = DOWN;
	if (location==0) direction = UP;
    end

endmodule // elevator
