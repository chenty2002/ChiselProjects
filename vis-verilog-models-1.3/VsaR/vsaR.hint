## loads with R0 as base register and any destination
#instruction[11:7]=b00000;
## loads with R1 as base register
#instruction[11:7]=b00001;
## loads with R2 as base register
#instruction[11:7]=b00010;
## loads with R3 as base register
#instruction[11:7]=b00011;
## ADDI/SUBI
#instruction[11:10]=b10;
# loads with R1 as destination register
instruction[11:9]=b000 * instruction[6:5]=b01;
# loads with R2 as destination register
instruction[11:9]=b000 * instruction[6:5]=b10;
## loads with R3 as destination register
#instruction[11:9]=b000 * instruction[6:5]=b11;
# loads with any register as base register and any destination
instruction[11:9]=b000;
# unconditional branches
instruction[11:5]=b0100000;
# stores with any register as base register
instruction[11:9]=b001;
## bitwise logical operations
#instruction[11:9]=b011 * (instruction[2:1]=b10 + instruction[2:1]=b01);
## arithmetic instructions: ADD register R0 to another register
#instruction[11:7]=b01100 * instruction[2:0]=b000;
## arithmetic instructions: SUB another register from R0
#instruction[11:7]=b01100 * instruction[2:0]=b001;
## arithmetic instructions: ADD register R1 to another register
#instruction[11:7]=b01101 * instruction[2:0]=b000;
## arithmetic instructions: SUB another register from R1
#instruction[11:7]=b01101 * instruction[2:0]=b001;
## arithmetic instructions: ADD register R2 to another register
#instruction[11:7]=b01110 * instruction[2:0]=b000;
## arithmetic instructions: SUB another register from R2
#instruction[11:7]=b01110 * instruction[2:0]=b001;
## arithmetic instructions: ADD register R3 to another register
#instruction[11:7]=b01111 * instruction[2:0]=b000;
## arithmetic instructions: SUB another register from R3
#instruction[11:7]=b01111 * instruction[2:0]=b001;
