// Right rotator.
//
// Author: Fabio Somenzi <Fabio@Colorado.EDU>

`let logw = 5
`let logwm1 = `logw - 1
`let width = 1 << `logw
`let msb = `width - 1

module rotate(clock,amount,din,dout);
    input	      clock;
    input [`logwm1:0] amount;
    input [`msb:0]    din;
    output [`msb:0]   dout;

    reg [`msb:0]      dout;
    reg [`msb:0]      inr;

    `for (i = 0; i <= `logw; i++)
    wire [`msb:0] tmp::`i;
    `endfor

    initial begin
	dout = 0;
	inr = 0;
    end

    assign tmp0 = inr;
    `let j = 1;
    `for (i = 0; i < `logw; i++)
    `let ip1 = `i + 1;
    `let jm1 = `j - 1;
    assign tmp::`ip1 = amount[`i] ?
	{tmp::`i[`jm1:0], tmp::`i[`msb:`j]} : tmp::`i;
    `let j = j + j;
    `endfor

    always @ (posedge clock) begin
	dout = tmp::`logw;
	inr = din;
    end // always @ (posedge clock)

endmodule // rotate
