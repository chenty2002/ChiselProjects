// Author: Fabio Somenzi <Fabio@Colorado.EDU>
// Derived from the non-parameterized version of Ramin Hojati.
//
`let N = 64;
`let THINKING = 0;
`let READING = 1;
`let EATING = 2;
`let HUNGRY = 3;
module philo::`N(clock);
    input clock;
    
    `for (i = 0; i < `N; i++)
    `let ip1 = (`i + 1) % `N;
    wire [1:0] st::`i;
    `if (`i == 0)
    `let im1 = `N - 1;
    philosopher ph::`i (clock,st::`i,st::`ip1,st::`im1,`READING);
    `else
    `let im1 = `i - 1;
    philosopher ph::`i (clock,st::`i,st::`ip1,st::`im1,`THINKING);
    `endif
    `endfor

endmodule // philo


module philosopher(clk, out, left, right, init);
    input clk;
    input [1:0] left, right, init;
    output [1:0] out;
    reg [1:0] state;

    wire      coin;
    assign coin = $ND(0,1);

    initial state = init;

    assign out = state;

    always @(posedge clk) begin
	case(state)
	  `READING:
	    if (left == `THINKING) state = `THINKING;

	  `THINKING:
	    if (right == `READING) state = `READING;
	    else state = coin ? `THINKING : `HUNGRY;

	  `EATING:
	    state = coin ? `THINKING : `EATING;

	  `HUNGRY:
	    if (left != `EATING && right != `HUNGRY && right != `EATING) 
	      state = `EATING;
	endcase
    end // always @ (posedge clk)

endmodule // philosopher
