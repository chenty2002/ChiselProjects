// This version of the infamous dining philosopher example uses a scheduler
// to enable only one philosopher at the time.  This is to mimic an
// asynchronous model.
//
// Author: Fabio Somenzi <Fabio@Colorado.EDU>
//
`let N = 10;
`let LNp1m1 = 3;
`let THINKING = 0;
`let LEFT = 1;
`let BOTH = 3;
`let RIGHT = 2;
module philo::`N(clock,select);
    input clock;
    input [`LNp1m1:0] select;

    reg [`LNp1m1:0] selreg;
    `for (i = 0; i < `N; i++)
    `let ip1 = (`i + 1) % `N;
    wire [1:0] st::`i;
    wire go::`i = selreg == `i;
    `if (`i == 0)
    `let im1 = `N - 1;
    `else
    `let im1 = `i - 1;
    `endif
    philosopher ph::`i (clock,go::`i,st::`i,st::`ip1,st::`im1,`THINKING);
    `endfor
    always @ (posedge clock) selreg = select;
    initial selreg = `N;

endmodule // philo


module philosopher(clk, go, out, left, right, init);
    input clk;
    input go;
    input [1:0] left, right, init;
    output [1:0] out;
    reg [1:0] state;

    initial state = init;

    assign out = state;

    always @(posedge clk) begin
	if (go)
	  case(state)
	    `THINKING:
	      if (left != `RIGHT && left != `BOTH) state = `LEFT;

	    `LEFT:
	      if (right != `LEFT && right != `BOTH) state = `BOTH;

	    `BOTH:
	      state = `RIGHT;

	    `RIGHT:
	      state = `THINKING;
	  endcase
    end // always @ (posedge clk)

endmodule // philosopher
