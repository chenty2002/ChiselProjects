#
# Specification for the ProductionCell 
#
# WARNING: All the formulas are included here, but only a few of them are used
# for the check_script
#
# Author: Abelardo Pardo <abel@vlsi.colorado.edu>
#
# Limitation of Mobility for the Travelling Crane
#
G(!((TC.Crane.HorizontalPos = OverFB) * 
    (TC.CraneCNTR.HorizontalMove = GoLeft)));                            # 1
G(!((TC.Crane.HorizontalPos = OverDB) * 
    (TC.CraneCNTR.HorizontalMove = GoRight)));                           # 2
G(!((TC.Crane.HorizontalPos = Middle) * 
   (!(TC.Crane.VerticalPos = UpMost))));                                 # 3
G(!((TC.Crane.HorizontalPos = OverDB) * 
    (TC.Crane.VerticalPos = FBHight)));                                  # 4
G(!(TC.Crane.VerticalPos = UpMost * 
    TC.CraneCNTR.VerticalMove = GoUp));                                  # 5
G(!(TC.Crane.VerticalPos = FBHight * 
   TC.CraneCNTR.VerticalMove = GoDown));                                 # 6
G(!TC.Crane.HorizontalMove = Stop -> 
   TC.CraneCNTR.VerticalPos = UpMost);                                   # 7
#
# Limitation of Mobility of the Rotary Table
#
G(!(RT.RTable.RTAngle = S * 
    RT.RTableCNTR.RTRotaryMotor = CWise));                               # 8
G(!(RT.RTable.RTAngle = SE * 
    RT.RTableCNTR.RTRotaryMotor = CCWise));                              # 9
G(!(RT.RTable.RTHight = Top * 
    RT.RTableCNTR.RTVerticalMotor = GoUp));                              # 10
G(!(RT.RTable.RTHight = Bot * 
    RT.RTableCNTR.RTVerticalMotor = GoDown));                            # 11
#
# Limitation of Mobility of the Rotary Arm
#
G(!(AR.Arm.RAAnglePos = OverRT * 
    AR.ACNTR.RARotaryMotor = CWise));                                    # 12
G(!(AR.Arm.RAAnglePos = OverLoadedPress * 
    AR.ACNTR.RARotaryMotor = CCWise));                                   # 13
G(!(AR.Arm.RALoadArm = Retracted * 
    AR.ACNTR.RAExtendLoadArm = Retract));                                # 14
G(!(AR.Arm.RALoadArm = Extended * 
    AR.ACNTR.RAExtendLoadArm = Extend));                                 # 15
G(!(AR.Arm.RAUnLoadArm = Retracted * 
    AR.ACNTR.RAExtendUnLoadArm = Retract));                              # 16
G(!(AR.Arm.RAUnLoadArm = Extended * 
    AR.ACNTR.RAExtendUnLoadArm = Extend));                               # 17
G(!((!AR.Arm.RALoadArm = Retracted) * 
    (!AR.Arm.RAUnLoadArm = Retracted)));                                 # 18
G(!AR.ACNTR.RARotaryMotor = Stop -> 
   (AR.Arm.RALoadArm = Retracted * AR.Arm.RAUnLoadArm = Retracted));     # 19
#
# Limitation of Mobility for the Press
#
G(!(PR.Pr.PressPosition = Top * PR.PrCNTR.PressMotor = GoUp));           # 20
G(!(PR.Pr.PressPosition = Bot * PR.PrCNTR.PressMotor = GoDown));         # 21
G((AR.Arm.RAAnglePos = OverLoadedPress * !AR.Arm.RALoadArm = Retracted)
  -> PR.Pr.PressPosition = Mid);                                         # 22
G(!(PR.Pr.PressPosition = Mid * AR.Arm.RALoadArm = Extended * 
    AR.Arm.RAAnglePos = OverLoadedPress));                               # 23
G(!(PR.Pr.PressPosition = Top * AR.Arm.RAUnLoadArm = Extended * 
    AR.Arm.RAAnglePos = OverUnLoadedPress));                             # 24
#
# Correctness of the communication protocol DB -> Crane
#
G(DB.DBeltCNTR.PieceOutDB = Y -> 
  F(TC.CraneCNTR.PieceGrabbedFromDB = Y));                              # 25
G(DB.DBeltCNTR.PieceOutDB = Y -> 
  (DB.DBeltCNTR.PieceOutDB = Y U TC.CraneCNTR.PieceGrabbedFromDB = Y)); # 26
#
# Correctness of the communication protocol ARM -> DB
#
G(DB.DBeltCNTR.DBReady = Y -> F(AR.ACNTR.PieceOutArm = Y));             # 27
G(DB.DBeltCNTR.DBReady = Y ->
  (DB.DBeltCNTR.DBReady = Y U AR.ACNTR.PieceOutArm = Y));               # 28
#
# Correctness of the communication protocol RT -> Arm
#
G(RT.RTableCNTR.RTOutReady = Y -> 
 (F(AR.ACNTR.PieceGrabbedFromRT = Y)));                                 # 29
G(RT.RTableCNTR.RTOutReady = Y -> 
 (RT.RTableCNTR.RTOutReady = Y U AR.ACNTR.PieceGrabbedFromRT = Y));     # 30
#
# Correctness of the communication protocol FB -> Crane
#
G(FB.FBeltCNTR.FBReady = Y -> F(TC.CraneCNTR.PieceReleasedOnFB = Y));   # 31
G(FB.FBeltCNTR.FBReady = Y ->
 (FB.FBeltCNTR.FBReady = Y U TC.CraneCNTR.PieceReleasedOnFB = Y));      # 32
#
# Correctness of the communication protocol FB -> RT (2358 seconds)
#
G(FB.FBeltCNTR.PieceOutFB = Y -> 
 F(RT.RTableCNTR.PieceGrabbedFromFB = Y));                              # 33
G(FB.FBeltCNTR.PieceOutFB = Y ->
 (FB.FBeltCNTR.PieceOutFB = Y U RT.RTableCNTR.PieceGrabbedFromFB = Y)); # 34
#
# Correctness of the communication protocol ARM -> LOAD PRESS
#
G( PR.PrCNTR.PressReadyToBeLoaded = Y -> 
   F(AR.ACNTR.ArmLoadedPress = Y));                                     # 35
G(PR.PrCNTR.PressReadyToBeLoaded = Y ->
 (PR.PrCNTR.PressReadyToBeLoaded = Y U AR.ACNTR.ArmLoadedPress = Y));   # 36
#
# Correctness of the communication protocol ARM -> UNLOAD PRESS
#
G( PR.PrCNTR.PressReadyToBeUnLoaded = Y -> 
   F(AR.ACNTR.ArmUnLoadedPress = Y));                                   # 37
G(PR.PrCNTR.PressReadyToBeUnLoaded = Y ->
 (PR.PrCNTR.PressReadyToBeUnLoaded = Y U 
  AR.ACNTR.ArmUnLoadedPress = Y));                                      # 38
