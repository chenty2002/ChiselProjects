\define idle	ra.state[1:0]=b00
#PASS: every request is eventually acknowledged.

AG((req=1) -> AF(ack=1));

#PASS: every acknowledgement is generated by a previous request.
# Requests are not persistent and are accepted only when the system is
# in idle state. Acknowledgements last for one cycle.  If we are in
# the initial state (where we know that we have no requests), or if we
# have an acknowledgement (in which case a current request would not
# be sensed), then for every successor we must see a request before we
# see another acknowledgement.

!EF((ack=1 + \idle * req=0) *
    EX(E((req=0 + !\idle) U ((req=0 + !\idle) * ack=1))));
