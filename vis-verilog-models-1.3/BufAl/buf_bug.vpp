// Buffer allocation model derived from Ken McMillan's.
// The modifications were meant to adapt the description to the requirements
// of vl2mv.
//
// Author: Fabio Somenzi <Fabio@Colorado.EDU>
//
`let LOG_SIZE = 4
`let SIZE = 1 << `LOG_SIZE
module buffer_alloc(clock,alloc_raw,nack,alloc_addr,free_raw,free_addr_raw);
    input		     clock;
    input 		     alloc_raw;
    output 		     nack;
    output [(`LOG_SIZE-1):0] alloc_addr;
    input 		     free_raw;
    input [(`LOG_SIZE-1):0]  free_addr_raw;

    reg 		     busy [0:(`SIZE - 1)];
    reg [`LOG_SIZE:0] 	     count;
    reg 		     alloc, free;
    reg [(`LOG_SIZE-1):0]    free_addr;
    integer 		     i;

    initial begin
	for (i = 0; i < `SIZE; i = i + 1)
	  busy[i] = 0;
	count = 0;
	alloc = 0;
	free = 0;
	free_addr = 0;
    end

    assign nack = alloc & (count == `SIZE);
    assign alloc_addr =
		       `for (j = 0; j < `SIZE; j++)
		       ~busy[`j] ? `j :
		       `endfor
		       0;

    always @ (posedge clock) begin
	alloc = alloc_raw;
	free = free_raw;
	free_addr = free_addr_raw;
	count = count + (alloc & ~nack) - (free & busy[free_addr]);
	if (free) busy[free_addr] = 0;
	if (alloc & ~nack) busy[alloc_addr] = 1;
    end

/*
    // assertions follow

    // definition of when a buffer is freed and allocated

    wire [(`SIZE - 1):0] allocd, freed;
    `for(j = 0; j < `SIZE; j++)
    assign allocd[j] = alloc & ~nack & alloc_addr == `j;
    assign freed[j] = free & free_addr == `j;
    `endfor

    // if an entry is allocated, it is not allocated again until freed

  always
    for(i = 0; i < `SIZE; i = i + 1) begin
      if (allocd[i]) begin
	wait(1);
        while(~freed[i]) begin
          assert safe[i]: ~allocd[i];
          wait(1);
        end
        assert safe[i]: ~allocd[i];
      end
    end
*/
endmodule // buffer_alloc
