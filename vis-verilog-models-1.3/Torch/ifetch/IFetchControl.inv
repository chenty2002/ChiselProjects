################################################################################
#Formula PASSED
#This invariant captures the property that extension bytes of the instruction
#block can be transfered if and only if the current state of instruction
#refilling operation is $EXTBYTE$.
#===============================================================================
ExtMuxSelect_s1=1 <-> PresState_s1[3:0]=b0111;

################################################################################
#Formula PASSED
#This invariant captures the property that $LatchShiftReg_s1$ (which is used
#in Instruction Fetch Datapath module to transfer the contents of the shared
#memory, when there are extension bytes in it, during instruction refilling
#operation) is high only if instruction refilling operation is at states
#$EXTBYTE$, $XFER1$, $XFER2$, $XFER3$.
#===============================================================================
LatchShiftReg_s1=1 <-> PresState_s1[3:0]={b0111,b0101,b1001,b1101};

################################################################################
#Formula PASSED
#This invariant captures the property that $LatchDataReg_s1$ (which is used in
#Instruction Fetch Datapath module to transfer the contents of the shared
#memory, when there are instructions in it, during instruction refilling
#operation) is high only if instruction refilling operation is at states
#$XFER0$, $XFER1$, $XFER2$, $XFER3$.
#===============================================================================
LatchDataReg_s1=1 <-> PresState_s1[3:0]={b0001,b0101,b1001,b1101};

################################################################################
#Formula PASSED
#This in variant is similar to the above invariants and signals the
#availbaility of cache, because it goes high only if you are at $CACHEHIT$
#state which means no cache miss operation or $REFETCH$ state which means
#cache refilling has been completed.
#===============================================================================
ReadCache_v1i=1 <-> PresState_s1[3:0]={b0010,b1111} * NonCacheableHeld_s1=0;

################################################################################
#Formula PASSED when MemStall_s1 = 0 was used in original Verilog code
#otherwise FAILED
#The original implementation says $WriteTag_s2=1$ if $PrevState_s2=XFER3$
#(which is caught by the next formula), which should imply that
#$PresState_s1=CACHEHIT$ or $PresState_s1=REFETCH$. But I guess due to the
#two phase clock system this will occur after necessary clock cycles are
#reached, therefore this formula fails as soon as $WriteTag_s2=1$.
#===============================================================================
WriteTag_s2=1 -> PresState_s1[3:0]={b0010,b1111};

################################################################################
#Formula PASSED
#$WriteTag_s2=1$  if $PrevState_s2=XFER3$, cache refilling has finished. 
#===============================================================================
WriteTag_s2=1 -> PrevState_s2[3:0]=b1101;

################################################################################
#Formula FAILED even when only MemStall_s1 = 0
#This formula states that state $XFER3$ must follow $XFER3$, $XFER2$,
#$WAITXfer3$. 
#===============================================================================
PresState_s1[3:0]=b1101 -> PrevState_s2[3:0]={b1001,b1101,b1100};

################################################################################
#Formula FAILED
#===============================================================================
(ADynamicBit_s1e=1 * ADynamicBit_s2r=1 * MipsMode_s1=0) -> BDrvA_s2r=0;

################################################################################
#Formula FAILED
#Actually this seemes to be as a true formula but it turns out that it fails.
#===============================================================================
IFetchStall_s2=1 -> IStall_s2=1;

################################################################################
#Formula FAILED
# This formula passed so it meant that actually tag writing on the cache was
# something different than reading of the cache because you could read from
# cache an instruction only if an other instruction is not being written to
# the cache whereas you can write the tag while an instruction is being written.
#===============================================================================
WriteCache_s2=0 + WriteTag_s2=0;

################################################################################
#Formula FAILED
#Supporting formula for the above goal
#===============================================================================
WriteTag_s2=0 + NonCacheableHeld_s1=0;

################################################################################
#Formula FAILED
#===============================================================================
ADrvB_s2r=0 + BDrvA_s2r=0;
