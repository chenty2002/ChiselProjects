// This is a system composed of a register file and a shifter
// with the same number of registers of the same width.
// At each transition, the shifter rotates its contents up by one
// position.  The register file holds its contents perpetually.  The
// verification problem consists in proving the following safety
// property (an invariant):
//
//   If one entry of the register file holds the same contents of an
//   entry of the shift register, then their neighbors hold the same
//   contents too.  In formula, letting n be the number of registers
//   in the shifter and the register file:
//       r(i) = b(j) -> r(i+1 mod n) = b(j+1 mod n),
//   for all i,j in {0,...,n-1}.
//
// Note that this invariant imposes the following constraint. Let m be
// the minimum value of |j-k| such that j != k, r(i) = b(j), and
// r(i) = b(k).  Let m = n if no j and k satisfy the requirement.  Then
// the contents of r and b are periodic with period gcd(m,n).
//
// The width of each register is the logarithm base 2 of n
// (the number of registers). This guarantees enough values to fill
// all registers of either shifter or register file with distinct values.
//
// Author: Fabio Somenzi <Fabio@Colorado.EDU>

`let LOG_N = 2
`let N = 1 << `LOG_N
module barrel::`N(clock);
    input clock;

    `for (i = 0; i < `N;  i++)
    reg [`LOG_N-1:0] b::`i, r::`i;
    `endfor

    integer index;

    function valid;
	`for (i = 0; i < `N;  i++)
        input [`LOG_N-1:0] b::`i, r::`i;
	`endfor
	begin: _valid
	    valid =
	        `for (i = 0; i < `N;  i++)
		  `let ip1 = (`i + 1) % `N
		  `for (j = 0; j < `N;  j++)
		    `let jp1 = (`j + 1) % `N
		    `if ((`i != (`N - 1)) || (`j != (`N - 1)))
		    (b::`i != r::`j || b::`ip1 == r::`jp1) &&
		    `else
		    (b::`i != r::`j || b::`ip1 == r::`jp1);
		    `endif
		  `endfor
		`endfor
	end
    endfunction // valid

    initial begin
	// Start by assuming all states initial.
	for (index = 0; index < `LOG_N; index = index + 1) begin
	`for (i = 0; i < `N; i++)
	    b::`i[index] = $ND(0,1); r::`i[index] = $ND(0,1);
	`endfor
	end
	// Then remap invalid initial states to valid one.
	if (!valid(
		 `for (i = 0; i < `N; i++)
		   `if (`i != `N - 1)
		   b::`i, r::`i,
		   `else
		   b::`i, r::`i
		   `endif
		 `endfor
		  )) begin
	    `for (i = 0; i < `N; i++)
	    b::`i = 0; r::`i = 0;
	    `endfor
	end
    end

    `for (i = 0; i < `N; i++)
    `let ip1 = (`i + 1) % `N
    always @ (posedge clock) begin
	b::`i = b::`ip1;
    end
    `endfor

endmodule // barrel
